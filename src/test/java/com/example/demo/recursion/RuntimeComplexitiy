 https://www.ideserve.co.in/learn/time-and-space-complexity-of-recursive-algorithms

Runtime Complexity is
1) Fibonacci - 2^n - exponential
Each fibonacii functin invokes 2 recorsive functions. Therefore total time taken to compute nth number of fibonacci sequence is O(2^n).
Nice explanation why fibonacii is exponential https://www.youtube.com/watch?v=AQp1OG7aSwg

2) Reverse string is O(n)
    Time Complexity of recursion is typically the product of the number of recursion invocations (R) and the time complexity of calculation;
    PrintReverseString function would be recursively invoked n times, where n is the size of the input string.
    The printing operation takes O(1).
    Therefore the time complexity of this particular operation is R*O(1) = N*O(1) = O(N);

Space Complexity is O(nm) where n is the max depth of the recursion tree
  If each function call of recursive algorithm takes O(m) space and if the maximum depth of recursion tree is 'n'
  then space complexity of recursive algorithm would be O(nm). Depth is the path from the root node in recursion tree to that leaf node.


  ===================================================================================================
  Memoization is an optimization technique used primarily to speed up computer programs by storing
  the results of expensive function calls and returning the cached result when the same inputs occur again.

  ===================================================================================================

  Backtracking is a general algorithm for finding all (or some) solutions to some computational problems
   which incrementally builds candidates to the solution and abandons a candidate ("backtracks")
   as soon as it determines that the candidate cannot lead to a valid solution.
   Backtracking reduced the number of steps taken to reach the final result. This is known as pruning the
   recursion tree because we don't take unnecessary paths.
   ===================================================================================================

   A general approach to backtracking questions in Java (Subsets, Permutations, Combination Sum, Palindromes
   https://leetcode.com/problems/permutations/solutions/18239/a-general-approach-to-backtracking-questions-in-java-subsets-permutations-combination-sum-palindrome-partioning/?orderBy=most_votes&languageTags=java

